#pragma once

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <wtxt>

#include "padinf.h"

#ifdef DEBUG
#pragma comment( lib, "wtxtpd" )
#else
#pragma comment( lib, "wtxtp" )
#endif

#define WTXT_PRINTER

class WtxtPrinter
{
public:
	WtxtPrinter();
	~WtxtPrinter() = default;
	
	WtxtPrinter(const WtxtPrinter &other) = delete;
	WtxtPrinter(WtxtPrinter &&other) = delete;
	WtxtPrinter operator=(const WtxtPrinter &other) = delete;
	WtxtPrinter operator=(WtxtPrinter &&other) = delete;
	
	WtxtPrinter & operator|(ui64 ui);
	WtxtPrinter & operator|(ui32 ui);
	WtxtPrinter & operator|(uli32 ui);
	WtxtPrinter & operator|(ui16 ui);
	WtxtPrinter & operator|(i64 i);
	WtxtPrinter & operator|(i32 i);
	WtxtPrinter & operator|(li32 i);
	WtxtPrinter & operator|(i16 i);
	WtxtPrinter & operator|(wchar_t wc);
	WtxtPrinter & operator|(char c);
	WtxtPrinter & operator|(bool b);
	/* TODO
	WtxtPrinter &operator|(float f);
	WtxtPrinter &operator|(double d);
	WtxtPrinter &operator|(long double d);
	*/
	WtxtPrinter & operator|(const void *vp);
	WtxtPrinter & operator|(const wchar_t *ccp);
	WtxtPrinter & operator|(cwstr cs);
	
	WtxtPrinter & operator|(const wtxt& t);
	
	WtxtPrinter & operator|(WtxtPrinter &(*func)(WtxtPrinter &tp));
	WtxtPrinter & operator|(WtxtPrinter &tp);
	WtxtPrinter & operator|(PadInfo pi);
	WtxtPrinter & operator|(SpaceNum sn);
	
	wtxt & operator*();
	
	friend WtxtPrinter & H(WtxtPrinter &tp);	// Next number as hex
	friend WtxtPrinter & S(WtxtPrinter &tp);	// Print Space
	friend WtxtPrinter & N(WtxtPrinter &tp);	// Print Newline
	friend WtxtPrinter & CR(WtxtPrinter &tp);	// Print Carriage Return
	friend WtxtPrinter & PN(WtxtPrinter &tp);	// Pad next number with '/' ' hundreds/bytes
	friend WtxtPrinter & DP(WtxtPrinter &tp);	// Disable all padding (sets default values)
	friend WtxtPrinter & CL(WtxtPrinter &tp);	// Clear the buffer
	friend WtxtPrinter & I(WtxtPrinter &tp);	// Print opening/closing bracket [/]
	
	friend PadInfo SP(ui64 len);				// Set padding length
	friend PadInfo SPC(char c);					// Set padding character
	friend PadInfo SPD(ui64 dir);				// Set padding direction
	friend PadInfo SPN(ui64 len);				// Set padding length for next print only
	friend PadInfo SPCN(char c);				// Set padding character for next print only
	friend PadInfo SPDN(ui64 dir);				// Set padding direction for next print only
	
	friend SpaceNum S(ui64 n);					// Print n Spaces
	
private:
	wtxt PadDec(const wtxt &dn);
	wtxt PadHex(const wtxt &hn);
	ui64 PrintPad(ui64 txtl);
	void PrintCenterPad(ui64 padl, bool right);
	void ResetSinglePad();
	
private:
	static wchar_t defpad;						// Default padding character
	
private:
	wtxt text;					// Main text buffer
	ui64 padlen;				// Next print's padding length
	ui64 pre_padlen;			// Previous padding length
	ui64 paddir;				// Padding direction
	ui64 pre_paddir;			// Previous padding direction
	wchar_t padchar;			// Padding char
	wchar_t pre_padchar;		// Previous padding char
	bool singpad;				// Single pad mode (only next print)
	bool pre_padc_set;			// Prev. padding char was set
	bool hex;					// Hex numbers mode
	bool npad;					// Number padding style
};

typedef WtxtPrinter wtxtp;

inline WtxtPrinter::WtxtPrinter()
{
	padlen = 0;
	pre_padlen = UI64_MAX;
	paddir = PADL;
	pre_paddir = UI64_MAX;
	singpad = false;
	padchar = defpad;
	pre_padc_set = false;
	hex = false;
	npad = false;
}

inline WtxtPrinter & WtxtPrinter::operator|(ui64 ui)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh(ui)) : i2wh(ui) : npad ? PadDec(i2wt(ui)) : i2wt(ui);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(ui32 ui)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh(ui)) : i2wh(ui) : npad ? PadDec(i2wt(ui)) : i2wt(ui);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(uli32 uli)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh(uli)) : i2wh(uli) : npad ? PadDec(i2wt(uli)) : i2wt(uli);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(ui16 ui)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh(ui)) : i2wh(ui) : npad ? PadDec(i2wt(ui)) : i2wt(ui);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(i64 i)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh((ui64)i)) : i2wh((ui64)i) : npad ? PadDec(i2wt(i)) : i2wt(i);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(i32 i)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh((ui64)i)) : i2wh((ui64)i) : npad ? PadDec(i2wt(i)) : i2wt(i);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(li32 li)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh((ui64)li)) : i2wh((ui64)li) : npad ? PadDec(i2wt(li)) : i2wt(li);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(i16 i)
{
	wtxt it = hex ? hex = false, npad ? PadHex(i2wh((ui64)i)) : i2wh((ui64)i) : npad ? PadDec(i2wt(i)) : i2wt(i);
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(wchar_t wc)
{
	if(paddir == PADR)
	{
		text += wc;
		PrintPad(1);
	}
	else if(paddir == PADL)
	{
		PrintPad(1);
		text += wc;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += wc;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(char c)
{
	if(paddir == PADR)
	{
		text += c;
		PrintPad(1);
	}
	else if(paddir == PADL)
	{
		PrintPad(1);
		text += c;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += c;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(bool b)
{
	wtxt btxt = b ? WL("true") : WL("false");
	
	if(paddir == PADR)
	{
		text += btxt;
		PrintPad(~btxt);
	}
	else if(paddir == PADL)
	{
		PrintPad(~btxt);
		text += btxt;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += btxt;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}
 /* TODO
inline WtxtPrinter & WtxtPrinter::operator|(float f)
{
	
}

inline WtxtPrinter & WtxtPrinter::operator|(double d)
{
	
}

inline WtxtPrinter & WtxtPrinter::operator|(long double d)
{
	
}
*/
inline WtxtPrinter & WtxtPrinter::operator|(const void *vp)
{
	wtxt it = i2wh((ui64)vp);
	txti(it, 0, WL("0x"));
	
	if(paddir == PADR)
	{
		text += it;
		PrintPad(~it);
	}
	else if(paddir == PADL)
	{
		PrintPad(~it);
		text += it;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += it;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(const wchar_t *ccp)
{
	ui64 ccpl = strl(ccp);
	if(paddir == PADR)
	{
		text += cwstr({ ccp, ccpl });
		PrintPad(ccpl);
	}
	else if(paddir == PADL)
	{
		PrintPad(ccpl);
		text += cwstr({ ccp, ccpl });
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += cwstr({ ccp, ccpl });
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(cwstr cs)
{
	if(paddir == PADR)
	{
		text += cs;
		PrintPad(cs.s);
	}
	else if(paddir == PADL)
	{
		PrintPad(cs.s);
		text += cs;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += cs;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(const wtxt& t)
{
	if(paddir == PADR)
	{
		text += t;
		PrintPad(~t);
	}
	else if(paddir == PADL)
	{
		PrintPad(~t);
		text += t;
	}
	else // Center
	{
		ui64 lr_pad = padlen/2;
		PrintCenterPad(lr_pad, false);
		text += t;
		PrintCenterPad(lr_pad + padlen % 2, true);
	}
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(WtxtPrinter &(*func)(WtxtPrinter &tp))
{
	return func(*this);
}

inline WtxtPrinter & WtxtPrinter::operator|(WtxtPrinter &tp)
{
	return tp;
}

inline WtxtPrinter & WtxtPrinter::operator|(PadInfo pi)
{
	if(pi.val & PAD_INFO_PAD_NEXT)
	{
		singpad = true;
		pi.val &= 0xDFFFFFFFFFFFFFFF;
	}
	
	ui64 pset_type = pi.val & 0xC000000000000000; // 0x11000...
	switch(pset_type)
	{
	case PAD_INFO_LENGTH: // Is zero, no need to use the mask
		if(singpad)
		{
			pre_padlen = padlen;
		}
		padlen = pi.val;
		break;
	case PAD_INFO_CHAR:
		if(singpad)
		{
			pre_padchar = padchar;
			pre_padc_set = true;
		}
		padchar = (wchar_t)(pi.val & 0x3FFFFFFFFFFFFFFF);
		break;
	case PAD_INFO_DIR:
		if(singpad)
		{
			pre_paddir = paddir;
		}
		paddir = pi.val & 0x3FFFFFFFFFFFFFFF;
		break;
	default:
		break;
	}
	
	return *this;
}

inline WtxtPrinter & WtxtPrinter::operator|(SpaceNum sn)
{
	if(sn.n == 0)
	{
		return *this;
	}
	
	wtxt sp = sn.n;
	
	for(ui64 i = 0; i < sn.n; ++i)
	{
		*((wchar_t *)sp + i) = ' ';
	}
	txtssz(sp, sn.n);
	
	text += sp;
	return *this;
}

inline wtxt & WtxtPrinter::operator*()
{
	return text;
}

inline ui64 WtxtPrinter::PrintPad(ui64 txtl)
{
	if(txtl >= padlen)
	{
		if(singpad)
		{
			ResetSinglePad();
		}
		return 0;
	}
	
	txtl = padlen - txtl;
	wtxt pad = txtl;
	
	for(ui64 i = 0; i < txtl; ++i)
	{
		*((wchar_t *)pad + i) = padchar;
	}
	txtssz(pad, txtl);
	text += pad;
	
	if(singpad)
	{
		ResetSinglePad();
	}
	
	return txtl;
}

inline void WtxtPrinter::PrintCenterPad(ui64 padl, bool right)
{
	if(padl == 0)
	{
		if(singpad && right)
		{
			ResetSinglePad();
		}
		return;
	}
	
	wtxt pad = padl;
	for(ui64 i = 0; i < padl; ++i)
	{
		*((wchar_t *)pad + i) = padchar;
	}
	txtssz(pad, padl);
	text += pad;
	
	if(singpad && right)
	{
		ResetSinglePad();
	}
}

inline void WtxtPrinter::ResetSinglePad()
{
	if(pre_padlen != UI64_MAX)
	{
		padlen = pre_padlen;
		pre_padlen = UI64_MAX;
	}
	if(pre_padc_set)
	{
		padchar = pre_padchar;
		pre_padc_set = false;
	}
	if(pre_paddir != UI64_MAX)
	{
		paddir = pre_paddir;
		pre_paddir = UI64_MAX;
	}
	
	singpad = false;
}

inline WtxtPrinter & H(WtxtPrinter &tp)
{
	tp.hex = true;
	return tp;
}

inline WtxtPrinter & S(WtxtPrinter &tp)
{
	tp.text += ' ';
	return tp;
}

inline WtxtPrinter & N(WtxtPrinter &tp)
{
	tp.text += '\n';
	return tp;
}

inline WtxtPrinter & CR(WtxtPrinter &tp)
{
	tp.text += '\r';
	return tp;
}

inline WtxtPrinter & PN(WtxtPrinter &tp)
{
	tp.npad = true;
	return tp;
}

inline WtxtPrinter & DP(WtxtPrinter &tp)
{
	tp.padlen = 0;
	tp.padchar = tp.defpad;
	tp.paddir = PADL;
	return tp;
}

inline WtxtPrinter & CL(WtxtPrinter &tp)
{
	txtclr(tp.text);
	return tp;
}

inline WtxtPrinter & I(WtxtPrinter &tp)
{
	static char brak = '[';
	tp.text += brak;
	brak = brak == '[' ? ']' : '[';
	return tp;
}